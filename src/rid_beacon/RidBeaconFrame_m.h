//
// Generated file, do not edit! Created by opp_msgtool 6.1 from rid_beacon/RidBeaconFrame.msg.
//

#ifndef __INET__IEEE80211_RIDBEACONFRAME_M_H
#define __INET__IEEE80211_RIDBEACONFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace ieee80211 {

class RidBeaconFrame;

}  // namespace ieee80211
}  // namespace inet

#include "inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame_m.h" // import inet.linklayer.ieee80211.mgmt.Ieee80211MgmtFrame


namespace inet {
namespace ieee80211 {

/**
 * Class generated from <tt>rid_beacon/RidBeaconFrame.msg:13</tt> by opp_msgtool.
 * <pre>
 * //
 * // Custom Beacon frame with additional fields
 * //
 * class RidBeaconFrame extends Ieee80211BeaconFrame
 * {
 *     int serialNumber;
 *     int64_t timestamp;
 *     bool emergencyStatus;
 * }
 * </pre>
 */
class RidBeaconFrame : public ::inet::ieee80211::Ieee80211BeaconFrame
{
  protected:
    int serialNumber = 0;
    int64_t timestamp = 0;
    bool emergencyStatus = false;

  private:
    void copy(const RidBeaconFrame& other);

  protected:
    bool operator==(const RidBeaconFrame&) = delete;

  public:
    RidBeaconFrame();
    RidBeaconFrame(const RidBeaconFrame& other);
    virtual ~RidBeaconFrame();
    RidBeaconFrame& operator=(const RidBeaconFrame& other);
    virtual RidBeaconFrame *dup() const override {return new RidBeaconFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSerialNumber() const;
    virtual void setSerialNumber(int serialNumber);

    virtual int64_t getTimestamp() const;
    virtual void setTimestamp(int64_t timestamp);

    virtual bool getEmergencyStatus() const;
    virtual void setEmergencyStatus(bool emergencyStatus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RidBeaconFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RidBeaconFrame& obj) {obj.parsimUnpack(b);}


}  // namespace ieee80211
}  // namespace inet


namespace omnetpp {

template<> inline inet::ieee80211::RidBeaconFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ieee80211::RidBeaconFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__IEEE80211_RIDBEACONFRAME_M_H

