<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="results/PerpendicularDrones-#0.vec"/>
    </inputs>
    <charts>
        <chart createdWith="OMNeT++ 6.1.0.241008-f7568267cd" icon="icons/full/obj/linechart.png" id="1572815074" name="Line Chart with Matplotlib 1" resultTypes="vector" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[import math
from omnetpp.scave import results, chart, utils

# get chart properties
props = chart.get_properties()
utils.preconfigure_plot(props)

# collect parameters for query
filter_expression = props["filter"]
start_time = float(props["vector_start_time"] or -math.inf)
end_time = float(props["vector_end_time"] or math.inf)
omit_empty_vectors = props["omit_empty_vectors"] == "true"

# query vector data into a data frame
try:
    df = results.get_vectors(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True, start_time=start_time, end_time=end_time, omit_empty_vectors=omit_empty_vectors)
except results.ResultQueryError as e:
    raise chart.ChartScriptError("Error while querying results: " + str(e))

if df.empty:
    raise chart.ChartScriptError("The result filter returned no data.")

# apply vector operations
df = utils.perform_vector_ops(df, props["vector_operations"])


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Keep a copy for power extraction
df_all = df.copy()

# Distance setup
MY_X = "Reception My X Coordinate"
MY_Y = "Reception My Y Coordinate"
MY_Z = "Reception My Z Coordinate"
OTH_X = "Reception X Coordinate"
OTH_Y = "Reception Y Coordinate"
OTH_Z = "Reception Z Coordinate"
required_names = {MY_X, MY_Y, MY_Z, OTH_X, OTH_Y, OTH_Z}

df_coords = df_all[df_all["name"].isin(required_names)].copy()
if df_coords.empty:
    raise chart.ChartScriptError("The filter returned no coordinate vectors.")

available = set(df_coords["name"].unique())
missing = required_names - available
if missing:
    raise chart.ChartScriptError(f"Missing required vectors: {', '.join(sorted(missing))}")

# Build distance vectors per (runID, module)
rows = []
for (runID, module), grp in df_coords.groupby(["runID", "module"], sort=False):
    name_to_row = {name: grp[grp["name"] == name] for name in required_names}
    if not all(len(name_to_row[n]) == 1 for n in required_names):
        continue

    def arr_from(row, col):
        return np.asarray(row.iloc[0][col], dtype=float)

    # Times
    tx = arr_from(name_to_row[MY_X], "vectime")
    ty = arr_from(name_to_row[MY_Y], "vectime")
    tz = arr_from(name_to_row[MY_Z], "vectime")
    ox = arr_from(name_to_row[OTH_X], "vectime")
    oy = arr_from(name_to_row[OTH_Y], "vectime")
    oz = arr_from(name_to_row[OTH_Z], "vectime")

    # Values
    vx_my = arr_from(name_to_row[MY_X], "vecvalue")
    vy_my = arr_from(name_to_row[MY_Y], "vecvalue")
    vz_my = arr_from(name_to_row[MY_Z], "vecvalue")
    vx_oth = arr_from(name_to_row[OTH_X], "vecvalue")
    vy_oth = arr_from(name_to_row[OTH_Y], "vecvalue")
    vz_oth = arr_from(name_to_row[OTH_Z], "vecvalue")

    # If timelines differ, interpolate to MY_X's timeline
    same_times = (
        np.array_equal(tx, ty) and np.array_equal(tx, tz) and
        np.array_equal(tx, ox) and np.array_equal(tx, oy) and np.array_equal(tx, oz)
    )
    ref_t = tx
    if not same_times:
        vy_my = np.interp(ref_t, ty, vy_my)
        vz_my = np.interp(ref_t, tz, vz_my)
        vx_oth = np.interp(ref_t, ox, vx_oth)
        vy_oth = np.interp(ref_t, oy, vy_oth)
        vz_oth = np.interp(ref_t, oz, vz_oth)

    dist = np.sqrt(
        (vx_oth - vx_my) ** 2 +
        (vy_oth - vy_my) ** 2 +
        (vz_oth - vz_my) ** 2
    )

    src = name_to_row[MY_X].iloc[0]
    out = {
        "runID": runID,
        "module": module,
        "name": "Distance to My",
        "vectime": ref_t.tolist(),
        "vecvalue": dist.tolist(),
    }
    for c in df_coords.columns:
        if c.startswith(("attr:", "itervar:", "runattr:")) or c in [
            "configname","experiment","measurement","network","replication",
            "repetition","resultdir","runnumber","seedset","unit","inifile"
        ]:
            out[c] = src.get(c, None)
    rows.append(out)

if not rows:
    raise chart.ChartScriptError("Could not construct distance vectors (missing per-run/module data).")

distance_df = pd.DataFrame(rows)

import matplotlib.pyplot as plt

# Plot distance on primary axis
ax = plt.gca()
distance_df["legend"] = "Distance to Beacon"
utils.sort_rows_by_legend(distance_df, props)  # optional
utils.plot_vectors(distance_df, props, sort=False)

# Extract and plot Reception Power on secondary axis
power_df = df_all[df_all["name"] == "Reception Power"].copy()
if not power_df.empty:
    power_df["legend"] = "Received Signal Strength"
    ax2 = ax.twinx()
    power_color = "tab:red"
    for _, r in power_df.iterrows():
        t = np.asarray(r["vectime"], dtype=float)
        v = np.asarray(r["vecvalue"], dtype=float)
        ax2.plot(t, v, label=r["legend"], color=power_color, alpha=0.8)
    ax2.set_ylabel("Received Signal Strength (dBm)")
    ax2.tick_params(axis="y")

# Axis titles/labels
ax.set_title("Scenario Simulation Results")
ax.set_xlabel("Simulation Time (s)")
ax.set_ylabel("Distance to Beacon (m)")

# Combined legend with matching colors; deduplicate by label
lines = ax.get_lines() + (ax2.get_lines() if 'ax2' in locals() else [])
labels = [ln.get_label() for ln in lines]
uniq = {lab: ln for lab, ln in zip(labels, lines)}  # last wins; keeps each label once
ax.legend(list(uniq.values()), list(uniq.keys()), loc="best")


from matplotlib.lines import Line2D
from matplotlib.ticker import FixedLocator


# Finalize plot (may add a default legend)
utils.postconfigure_plot(props)

# Remove any legends that utils/matplotlib already added (axes-level and figure-level)
fig = plt.gcf()
for ax_i in {ax, ax2} if 'ax2' in locals() else {ax}:
    leg = ax_i.get_legend()
    if leg is not None:
        leg.remove()
for leg in list(fig.legends):
    leg.remove()

# Grid only from the left axis
ax.yaxis.grid(True)
if 'ax2' in locals():
    ax2.yaxis.grid(False)

# Ensure limits/ticks are computed
fig.canvas.draw()

# Build a clean 2-entry legend with the actual line colors
from matplotlib.lines import Line2D
distance_color = ax.get_lines()[0].get_color() if ax.get_lines() else "tab:blue"
power_color = ax2.get_lines()[0].get_color() if 'ax2' in locals() and ax2.get_lines() else "tab:red"
handles = [
    Line2D([0], [0], color=distance_color, lw=2, label="Distance to Beacon"),
    Line2D([0], [0], color=power_color,   lw=2, label="Received Signal Strength"),
]
ax.legend(handles=handles, loc="best")

# Align right-axis ticks with left-axis gridlines and lock them
from matplotlib.ticker import FixedLocator
ylmin, ylmax = ax.get_ylim()
if 'ax2' in locals():
    yrmin, yrmax = ax2.get_ylim()
    left_ticks_major = ax.get_yticks()
    right_ticks_major = np.interp(left_ticks_major, [ylmin, ylmax], [yrmin, yrmax])

    ax2.set_autoscaley_on(False)
    ax2.set_ylim(yrmin, yrmax)
    ax2.yaxis.set_major_locator(FixedLocator(right_ticks_major))

    # Optional: minor ticks
    left_minor = ax.yaxis.get_minorticklocs()
    if len(left_minor) > 0:
        right_minor = np.interp(left_minor, [ylmin, ylmax], [yrmin, yrmax])
        ax2.yaxis.set_minor_locator(FixedLocator(right_minor))

fig.subplots_adjust(left=0.12, right=0.82, top=0.90, bottom=0.12)

# Title and axis label font sizes
ax.set_title("Scenario Simulation Results", fontsize=24)
ax.set_xlabel("Simulation Time (s)", fontsize=20)
ax.set_ylabel("Distance to Beacon (m)", fontsize=20)
ax2.set_ylabel("Received Signal Strength (dBm)", fontsize=20)

# Tick label font sizes
ax.tick_params(axis="both", labelsize=12)
ax2.tick_params(axis="y", labelsize=12)

# Line thickness (both axes)
for ln in ax.get_lines():
    ln.set_linewidth(4)
for ln in ax2.get_lines():
    ln.set_linewidth(4)

# Legend font size (for your custom 2-entry legend)
leg = ax.get_legend()
if leg:
    for txt in leg.get_texts():
        txt.set_fontsize(12)

# Now export
utils.export_image_if_needed(props)
utils.export_data_if_needed(distance_df, props)

]]></script>
            <dialogPage id="INPUT" label="Input"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">
  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang" />
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
  </import>
  <layout x:class="GridLayout" numColumns="1" />
  <x:children>
    <label text="Filter expression:" />
    <styledText x:id="filter" x:style="BORDER|V_SCROLL|H_SCROLL" x:id.contentAssist="filter" x:id.resultType="vector">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
    </styledText>

    <composite>
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" />
      <layout x:class="GridLayout" numColumns="2" makeColumnsEqualWidth="false" marginWidth="0" />
      <x:children>
        <button x:id="omit_empty_vectors" x:style="CHECK" x:id.default="false" text="Omit empty vectors">
          <layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING" />
        </button>
        <button x:id="simplify" x:style="PUSH" text="Simplify" x:id.role="simplify" x:id.targetControl="filter">
          <layoutData x:class="GridData" horizontalAlignment="END" grabExcessHorizontalSpace="true"/>
        </button>
      </x:children>
    </composite>
    <composite>
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" />
      <layout x:class="GridLayout" numColumns="2" makeColumnsEqualWidth="false" />
      <x:children>
        <group text="Crop interval">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="false" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
          <layout x:class="GridLayout" numColumns="2" />
          <x:children>
            <label text="Start time (sec):" />
            <text x:id="vector_start_time" x:style="BORDER">
              <layoutData x:class="GridData" widthHint="180" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false" />
            </text>
            <label text="End time (sec):" />
            <text x:id="vector_end_time" x:style="BORDER">
              <layoutData x:class="GridData" widthHint="180" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false" />
            </text>
          </x:children>
        </group>
        <group text="Vector operations (one per line)">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
          <layout x:class="GridLayout" numColumns="1" />
          <x:children>
            <text x:id="vector_operations" x:style="BORDER|MULTI|V_SCROLL|H_SCROLL" x:id.contentAssist="vectorops">
              <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
            </text>
          </x:children>
        </group>
      </x:children>
    </composite>
  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="LINES" label="Lines"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2" makeColumnsEqualWidth="true"/>

  <x:children>

    <group text="Lines">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <label text="Draw style:"/>
    <combo x:id="drawstyle" x:id.default="auto" x:style="BORDER|READ_ONLY">
      <add x:p0="auto"/>
      <add x:p0="none"/>
      <add x:p0="linear"/>
      <add x:p0="steps-pre"/>
      <add x:p0="steps-mid"/>
      <add x:p0="steps-post"/>
    </combo>

    <label text="Line color:"/>
    <ColorChooser x:id="linecolor" x:id.default="" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="BEGINNING" grabExcessHorizontalSpace="false"/>
    </ColorChooser>

    <label text="Line style:"/>
    <combo x:id="linestyle" x:id.default="solid" x:style="BORDER|READ_ONLY">
      <add x:p0="none"/>
      <add x:p0="solid"/>
      <add x:p0="dotted"/>
      <add x:p0="dashed"/>
      <add x:p0="dashdot"/>
    </combo>

    <label text="Line width:"/>
    <spinner x:id="linewidth" x:id.default="1.5" minimum="0" digits="1" selection="15" maximum="1000" x:style="BORDER"/>

      </x:children>
    </group>

    <group text="Markers">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <label text="Marker:"/>
    <combo x:id="marker" x:id.default="none" x:style="BORDER">
      <add x:p0="auto"/>
      <add x:p0="none"/>
      <add x:p0=". (dot)"/>
      <add x:p0=", (point)"/>
      <add x:p0="v (triangle down)"/>
      <add x:p0="^ (triangle up)"/>
      <add x:p0="&lt; (triangle left)"/>
      <add x:p0="&gt; (triangle right)"/>
      <add x:p0="1 (tri down)"/>
      <add x:p0="2 (tri up)"/>
      <add x:p0="3 (tri left)"/>
      <add x:p0="4 (tri right)"/>
      <add x:p0="| (vline)"/>
      <add x:p0="_ (hline)"/>
      <add x:p0="8 (octagon)"/>
      <add x:p0="o (circle)"/>
      <add x:p0="s (square)"/>
      <add x:p0="p (pentagon)"/>
      <add x:p0="* (star)"/>
      <add x:p0="+ (plus)"/>
      <add x:p0="x (cross)"/>
      <add x:p0="D (diamond)"/>
      <add x:p0="d (thin diamond)"/>
      <!-- TODO the rest...  -->
    </combo>

    <label text="Marker size:"/>
    <spinner x:id="markersize" x:id.default="5" selection="6" minimum="0" maximum="100" x:style="BORDER"/>
      </x:children>
    </group>

    <group text="Hints">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
      <layout x:class="GridLayout" numColumns="1"/>
      <x:children>

        <label x:style="WRAP" text="* To change the set of colors/markers used in Auto mode, choose a different cycle seed on the Styling page">
          <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
        </label>

        <label x:style="WRAP" text="* To have more control over the specific colors/markers chosen, add properties in the Advanced page. Examples:">
          <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
        </label>

        <label x:style="WRAP" text="       `axes.prop_cycle: cycler('color', ['blue', 'green', 'red'])`  # on a Matplotlib chart: selects colors">
          <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
        </label>

        <label x:style="WRAP" text="       `Line.Color/3: yellow`  # on a native chart: selects the color of the 3rd line">
          <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
        </label>
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="PLOT" label="Plot"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2" makeColumnsEqualWidth="true"/>

  <x:children>

    <group text="Title">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- Plot title -->
    <label text="Plot title:"/>
    <text x:id="title" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!-- } -->
      </x:children>
    </group>

    <!-- X Axis { -->
    <group text="X axis">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <label text="Label:"/>
    <text x:id="xaxis_title" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <label text="Min:"/>
    <text x:id="xaxis_min" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <label text="Max:"/>
    <text x:id="xaxis_max" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <button x:id="xaxis_log" x:id.default="false" text="Logarithmic" x:style="CHECK">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <!-- } -->
      </x:children>
    </group>

    <!-- Y Axis { -->
    <group text="Y axis">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <label text="Label:"/>
    <text x:id="yaxis_title" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <label text="Min:"/>
    <text x:id="yaxis_min" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <label text="Max:"/>
    <text x:id="yaxis_max" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <button x:id="yaxis_log" x:id.default="false" text="Logarithmic" x:style="CHECK">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <!-- } -->
      </x:children>
    </group>

    <!-- Grid { -->
    <group text="Grid">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- Display Legend? -->
    <button x:id="grid_show" x:id.default="true" text="Show grid" x:style="CHECK" x:id.isEnabler="true">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <!-- Show grid:None/Major/All -->
    <label text="Density:"/>
    <combo x:id="grid_density" x:id.default="Major" x:style="BORDER|READ_ONLY">
      <add x:p0="Major"/>
      <add x:p0="All"/>
    </combo>

    <!-- } -->
      </x:children>
    </group>

    <!-- Legend { -->
    <group text="Legend">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="false"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- Display Legend? -->
    <button x:id="legend_show" x:id.default="true" text="Show legend" x:style="CHECK" x:id.isEnabler="true" >
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <!-- Placement -->
    <label text="Placement:"/>
    <combo x:id="legend_placement" x:id.default="upper right" x:style="BORDER|READ_ONLY">
      <add x:p0="best"/>
      <add x:p0="upper right"/>
      <add x:p0="upper left"/>
      <add x:p0="lower left"/>
      <add x:p0="lower right"/>
      <add x:p0="right"/>
      <add x:p0="center left"/>
      <add x:p0="center right"/>
      <add x:p0="lower center"/>
      <add x:p0="upper center"/>
      <add x:p0="center"/>
      <add x:p0="outside top left"/>
      <add x:p0="outside top center"/>
      <add x:p0="outside top right"/>
      <add x:p0="outside bottom left"/>
      <add x:p0="outside bottom center"/>
      <add x:p0="outside bottom right"/>
      <add x:p0="outside left top"/>
      <add x:p0="outside left center"/>
      <add x:p0="outside left bottom"/>
      <add x:p0="outside right top"/>
      <add x:p0="outside right center"/>
      <add x:p0="outside right bottom"/>
    </combo>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="LEGEND" label="Legend"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">
  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang" />
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
  </import>
  <layout x:class="GridLayout" numColumns="1" />
  <x:children>

        <group text="Legend labels">

          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="false" verticalAlignment="FILL" grabExcessVerticalSpace="false" />
          <layout x:class="GridLayout" />
          <x:children>
            <button x:id='legend_automatic' text='Automatic' x:style='RADIO' x:id.default="true"/>
            <composite>
              <layoutData x:class="GridData" horizontalIndent="30"/>
              <layout x:class="GridLayout" marginHeight="0" marginBottom="5"/>
              <x:children>
                <button x:id='legend_prefer_result_titles' text='Use result title instead of name where available' x:style='CHECK' x:id.default="true" x:id.enablerButton="legend_automatic"/>
                <button x:id='legend_prefer_module_display_paths' text='Use module display path instead of full path where available' x:style='CHECK' x:id.default="true" x:id.enablerButton="legend_automatic"/>
              </x:children>
            </composite>

            <button x:id='legend_manual' text='Manual' x:style='RADIO'/>
            <composite>
              <layoutData x:class="GridData" horizontalIndent="30"/>
              <layout x:class="GridLayout" numColumns="2" marginHeight="0" marginBottom="5"/>
              <x:children>
                <label text="Format string:"/>
                <text x:id="legend_format" x:style="BORDER" x:id.enablerButton="legend_manual" x:id.contentAssist="columns">
                  <layoutData x:class="GridData" widthHint="200" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="CENTER" grabExcessVerticalSpace="false" />
                </text>
                <label text="Hint: Add $name or ${name} to insert content of data frame column; use $$ to insert dollar sign">
                  <layoutData x:class="GridData" horizontalSpan="2" />
                </label>
              </x:children>
            </composite>
          </x:children>

        </group>

        <group text="Label tweaking">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
          <layout x:class="GridLayout" numColumns="1" />
          <x:children>
            <label x:style='WRAP' text="Enter string replacements (foo --&gt; bar) or sed-style replacements (/foo-regex/bar-regex/) to be applied to the labels, one per line:">
              <layoutData x:class='GridData' horizontalAlignment='FILL' grabExcessHorizontalSpace='true'/>
            </label>
            <styledText x:id="legend_replacements" x:style="BORDER|V_SCROLL|H_SCROLL" x:id.contentAssist="columns">
              <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true" />
            </styledText>
            <label x:style='WRAP' text="Hint: $name or ${name} inserts the content of a data frame column; use $$ to insert dollar sign">
              <layoutData x:class='GridData' horizontalAlignment='FILL' grabExcessHorizontalSpace='true'/>
            </label>
            <!--
            <label text="Examples:"/>
            <label text='- &quot;/tcp/TCP/&quot; ==&gt; change &quot;tcp&quot; to &quot;TCP&quot;'/>
            <label text='- &quot;/ +/ /&quot; ==&gt; replace multiple spaces with one space'/>
            <label text="- &quot;/host\[(\d+)\]/in host \1/&quot; ==&gt; change &quot;host[21]&quot; to &quot;in host 21&quot; (note \1,\2 as group reference)"/>
            <label text='- &quot;/\//:/&quot; or &quot;|\|:|&quot; ==&gt; replace slashes with colons'/>
            -->
          </x:children>
        </group>


  </x:children>
</xswt>]]></dialogPage>
            <dialogPage id="ORDERING" label="Ordering"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>

  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
    <package name='org.omnetpp.common.wizard.support' />
    <package name='org.omnetpp.ned.editor.wizards.support' />
    <package name='org.omnetpp.cdt.wizard.support' />
  </import>

  <layout x:class='GridLayout'/>

  <x:children>

    <group text="Ordering of items on the legend and on the plot">
      <layoutData x:class="GridData" horizontalSpan="1" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

        <!-- ordering_regex_list -->
        <label text='Primary ordering (one regex per line):'/>
        <label text='Secondary ordering (one regex per line):'/>
        <text x:id='ordering_regex_list' x:style='BORDER|WRAP|MULTI|V_SCROLL'>
          <layoutData x:class='GridData' heightHint='60' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
        </text>

        <!-- secondary_ordering_regex_list -->
        <text x:id='secondary_ordering_regex_list' x:style='BORDER|WRAP|MULTI|V_SCROLL'>
          <layoutData x:class='GridData' heightHint='60' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
        </text>

        <!-- hint -->
        <label x:style='WRAP' text='NOTE: Items will be ordered based on legend labels. Specify a series of regexes, one per line, to define the ranking of items. Each item&apos;s rank will be determined by the index of the first regex it matches. After sorting, items matching the first regex will appear at the top, those matching the second regex will be placed below, and so forth. Case-sensitive substring match is used.'>
          <layoutData x:class='GridData' horizontalSpan='2' horizontalAlignment='FILL' grabExcessHorizontalSpace='true'/>
        </label>

        <!-- sorting -->
        <button x:id='sorting' text='Use alphabetical sorting as tertiary ordering' x:style='CHECK' x:id.default="true">
          <layoutData x:class='GridData' horizontalSpan='2'/>
        </button>

      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="STYLING" label="Styling"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- Style { -->
    <group text="Style">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <label text="Style:"/>
    <combo x:id="plt.style"  x:id.default="default" x:style="BORDER">
      <add x:p0="default"/>
      <add x:p0="classic"/>
      <add x:p0="ggplot"/>
      <add x:p0="grayscale"/>
      <add x:p0="dark_background"/>
      <add x:p0="bmh"/>
      <add x:p0="fast"/>
      <add x:p0="fivethirtyeight"/>
      <add x:p0="tableau-colorblind10"/>
      <add x:p0="Solarize_Light2"/>
      <add x:p0="seaborn"/>
      <add x:p0="seaborn-bright"/>
      <add x:p0="seaborn-colorblind"/>
      <add x:p0="seaborn-dark"/>
      <add x:p0="seaborn-darkgrid"/>
      <add x:p0="seaborn-dark-palette"/>
      <add x:p0="seaborn-deep"/>
      <add x:p0="seaborn-muted"/>
      <add x:p0="seaborn-notebook"/>
      <add x:p0="seaborn-paper"/>
      <add x:p0="seaborn-pastel"/>
      <add x:p0="seaborn-poster"/>
      <add x:p0="seaborn-talk"/>
      <add x:p0="seaborn-ticks"/>
      <add x:p0="seaborn-white"/>
      <add x:p0="seaborn-whitegrid"/>
    </combo>

    <label text="Cycle seed:"/>
    <spinner x:id="cycle_seed" x:id.default="0" selection="0" minimum="0" maximum="1000000" x:style="BORDER"/>

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Figure background color:"/>
    <ColorChooser x:id="matplotlibrc.figure.facecolor" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <label text="Axes background color:"/>
    <ColorChooser x:id="matplotlibrc.axes.facecolor" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>


    <!-- Legend { -->
    <group text="Legend">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <button x:id="matplotlibrc.legend.frameon" x:id.default="true" text="Frame" x:style="CHECK"  x:id.isEnabler="true">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <button x:id="matplotlibrc.legend.fancybox" x:id.default="false" text="Fancybox" x:style="CHECK">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <button x:id="matplotlibrc.legend.shadow" x:id.default="false" text="Shadow" x:style="CHECK">
      <layoutData x:class="GridData" horizontalSpan="2"/>
    </button>

    <!-- } -->
      </x:children>
    </group>


  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="ADVANCED" label="Advanced"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <label text="Here you can further customize the plot using matplotlibrc properties."/>
    <label text="The syntax is one entry per line in the 'key : value' format; comments (#) are also accepted."/>
    <label text="Content Assist available (hit Ctrl+Space)."/>
    <styledText x:id="matplotlibrc" x:style="BORDER|V_SCROLL|H_SCROLL" x:id.contentAssist="matplotlibrc">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true"/>
    </styledText>
  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="EXPORT" label="Export"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <group text="Image export">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

        <label text="Image file name (w/o extension):"/>
        <text x:id="image_export_filename" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>

        <label text="Image width (inches):"/>
        <text x:id="image_export_width" x:id.default="6" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>

        <label text="Image height (inches):"/>
        <text x:id="image_export_height" x:id.default="4" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>

      </x:children>
    </group>

    <group text="Data export">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

        <label text="File name (w/o extension):"/>
        <text x:id="data_export_filename" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>

      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <property name="legend_prefer_module_display_paths" value="true"/>
            <property name="matplotlibrc.legend.frameon" value="true"/>
            <property name="matplotlibrc.legend.fancybox" value="false"/>
            <property name="grid_show" value="true"/>
            <property name="ordering_regex_list" value=""/>
            <property name="vector_end_time" value=""/>
            <property name="linecolor" value=""/>
            <property name="matplotlibrc.figure.facecolor" value=""/>
            <property name="legend_prefer_result_titles" value="true"/>
            <property name="legend_manual" value="false"/>
            <property name="yaxis_title" value=""/>
            <property name="legend_replacements" value=""/>
            <property name="title" value=""/>
            <property name="legend_automatic" value="true"/>
            <property name="vector_operations" value=""/>
            <property name="cycle_seed" value="0"/>
            <property name="sorting" value="true"/>
            <property name="yaxis_log" value="false"/>
            <property name="image_export_height" value="4"/>
            <property name="xaxis_log" value="false"/>
            <property name="legend_placement" value="upper right"/>
            <property name="data_export_filename" value=""/>
            <property name="xaxis_title" value=""/>
            <property name="grid_density" value="Major"/>
            <property name="yaxis_min" value=""/>
            <property name="image_export_filename" value=""/>
            <property name="xaxis_min" value=""/>
            <property name="matplotlibrc.axes.facecolor" value=""/>
            <property name="linewidth" value="1.5"/>
            <property name="legend_format" value=""/>
            <property name="filter" value="type =~ vector AND runattr:experiment =~ PerpendicularDrones AND runattr:replication =~ &quot;#0&quot; AND module =~ &quot;BasicUav.host[0].wlan[0].mgmt&quot; AND (&#10;&#9;name =~ &quot;Reception My X Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception My Y Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception My Z Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception X Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception Y Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception Z Coordinate&quot; OR&#10;&#9;name =~ &quot;Reception Power&quot;&#10;)"/>
            <property name="vector_start_time" value=""/>
            <property name="linestyle" value="solid"/>
            <property name="markersize" value="5"/>
            <property name="secondary_ordering_regex_list" value=""/>
            <property name="drawstyle" value="auto"/>
            <property name="marker" value="none"/>
            <property name="plt.style" value="default"/>
            <property name="legend_show" value="true"/>
            <property name="matplotlibrc.legend.shadow" value="false"/>
            <property name="simplify" value="false"/>
            <property name="yaxis_max" value=""/>
            <property name="xaxis_max" value=""/>
            <property name="image_export_width" value="6"/>
            <property name="omit_empty_vectors" value="false"/>
            <property name="matplotlibrc" value=""/>
        </chart>
    </charts>
</analysis>
